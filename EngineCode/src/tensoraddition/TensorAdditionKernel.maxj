package tensoraddition;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class TensorAdditionKernel extends Kernel {

	private static final DFEType floatType = dfeFloat(8, 24);
	private static final DFEType longType = dfeUInt(32);

	protected TensorAdditionKernel(KernelParameters parameters, int tileSize) {
		super(parameters);



		DFEVar inTensors = io.input("inTensors", floatType);  // input tensors
		DFEVar numTensors = io.scalarInput("numTensors", longType);  // number of tensors
		CounterChain chain = control.count.makeCounterChain();
		DFEVar numTensorsCnt = chain.addCounter(numTensors, 1);
		chain.addCounter(tileSize,1);

		DFEVar currSum = floatType.newInstance(this);
		DFEVar sum = numTensorsCnt.eq(0) ? 0 : currSum;
		DFEVar newSum = sum+inTensors;
		DFEVar newSumOffset = stream.offset(newSum, -tileSize);
		currSum <== newSumOffset;

		io.output("sum", newSum, floatType,numTensorsCnt.eq(numTensors-1));

	}

}
