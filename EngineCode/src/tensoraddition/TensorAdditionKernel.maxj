package tensoraddition;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class TensorAdditionKernel extends Kernel {

	private static final DFEType floatType = dfeFloat(8, 24);
	private static final DFEType longType = dfeUInt(32);

	protected TensorAdditionKernel(KernelParameters parameters) {
		super(parameters);

		OffsetExpr loopLength = stream.makeOffsetAutoLoop("loopLength");

		DFEVar inTensors = io.input("inTensors", floatType);  // input tensors
		DFEVar numTensors = io.scalarInput("numTensors", longType);  // number of tensors
		DFEVar numTensorsCnt = control.count.simpleCounter(32, numTensors);


		DFEVar currSum = floatType.newInstance(this);
		DFEVar sum = numTensorsCnt.eq(0) ? 0 : currSum;
		DFEVar newSum = sum+inTensors;
		DFEVar newSumOffset = stream.offset(newSum, -loopLength);
		currSum <== newSumOffset;

		io.output("sum", currSum, floatType,numTensorsCnt.eq(numTensors-1));


	}

}
